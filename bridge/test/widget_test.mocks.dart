// Mocks generated by Mockito 5.4.0 from annotations
// in bridge/test/widget_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:core_data/src/repository/auth_repository.dart' as _i2;
import 'package:core_data/src/repository/room_repository.dart' as _i4;
import 'package:core_data/src/repository/token_repository.dart' as _i7;
import 'package:core_data/src/repository/user_repository.dart' as _i6;
import 'package:core_model/model.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AuthenticationRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthenticationRepository extends _i1.Mock
    implements _i2.AuthenticationRepository {
  @override
  _i3.Stream<_i2.AuthenticationStatus> get status => (super.noSuchMethod(
        Invocation.getter(#status),
        returnValue: _i3.Stream<_i2.AuthenticationStatus>.empty(),
        returnValueForMissingStub: _i3.Stream<_i2.AuthenticationStatus>.empty(),
      ) as _i3.Stream<_i2.AuthenticationStatus>);
  @override
  _i3.Future<void> login({
    required String? email,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #login,
          [],
          {
            #email: email,
            #password: password,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> logout({
    required String? email,
    required String? token,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #logout,
          [],
          {
            #email: email,
            #token: token,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  _i3.Future<void> signup({
    required String? email,
    required String? nickname,
    required String? password,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #signup,
          [],
          {
            #email: email,
            #nickname: nickname,
            #password: password,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);
  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [RoomRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockRoomRepository extends _i1.Mock implements _i4.RoomRepository {
  @override
  _i3.Stream<_i5.Room?> getRoomStream(
    String? roomId,
    String? token,
    String? userId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRoomStream,
          [
            roomId,
            token,
            userId,
          ],
        ),
        returnValue: _i3.Stream<_i5.Room?>.empty(),
        returnValueForMissingStub: _i3.Stream<_i5.Room?>.empty(),
      ) as _i3.Stream<_i5.Room?>);
  @override
  _i3.Future<String?> createRoom({
    required String? token,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #createRoom,
          [],
          {
            #token: token,
            #userId: userId,
          },
        ),
        returnValue: _i3.Future<String?>.value(),
        returnValueForMissingStub: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);
  @override
  _i3.Future<bool?> deleteRoom({
    required String? roomId,
    required String? token,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteRoom,
          [],
          {
            #roomId: roomId,
            #token: token,
            #userId: userId,
          },
        ),
        returnValue: _i3.Future<bool?>.value(),
        returnValueForMissingStub: _i3.Future<bool?>.value(),
      ) as _i3.Future<bool?>);
  @override
  _i3.Future<bool?> joinRoom({
    required String? roomId,
    required String? token,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #joinRoom,
          [],
          {
            #roomId: roomId,
            #token: token,
            #userId: userId,
          },
        ),
        returnValue: _i3.Future<bool?>.value(),
        returnValueForMissingStub: _i3.Future<bool?>.value(),
      ) as _i3.Future<bool?>);
  @override
  _i3.Future<List<_i5.Room>> listRooms({
    required String? token,
    required String? userId,
    bool? isOpen = true,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #listRooms,
          [],
          {
            #token: token,
            #userId: userId,
            #isOpen: isOpen,
          },
        ),
        returnValue: _i3.Future<List<_i5.Room>>.value(<_i5.Room>[]),
        returnValueForMissingStub:
            _i3.Future<List<_i5.Room>>.value(<_i5.Room>[]),
      ) as _i3.Future<List<_i5.Room>>);
  @override
  _i3.Future<_i5.Room?> getRoom({
    required String? roomId,
    required String? token,
    required String? userId,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRoom,
          [],
          {
            #roomId: roomId,
            #token: token,
            #userId: userId,
          },
        ),
        returnValue: _i3.Future<_i5.Room?>.value(),
        returnValueForMissingStub: _i3.Future<_i5.Room?>.value(),
      ) as _i3.Future<_i5.Room?>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i6.UserRepository {
  @override
  _i3.Future<_i5.User?> getUser() => (super.noSuchMethod(
        Invocation.method(
          #getUser,
          [],
        ),
        returnValue: _i3.Future<_i5.User?>.value(),
        returnValueForMissingStub: _i3.Future<_i5.User?>.value(),
      ) as _i3.Future<_i5.User?>);
  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [TokenRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockTokenRepository extends _i1.Mock implements _i7.TokenRepository {
  @override
  _i3.Future<String?> getToken() => (super.noSuchMethod(
        Invocation.method(
          #getToken,
          [],
        ),
        returnValue: _i3.Future<String?>.value(),
        returnValueForMissingStub: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);
  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
